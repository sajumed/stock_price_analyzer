/**
 * Stock Data Visualization using Chart.js
 * Loads data from JSON file generated by Python script
 */

class StockVisualizer {
    constructor() {
        this.chart = null;
        this.currentData = null;
        this.indicators = {
            sma20: true,
            sma50: true,
            rsi: false,
            macd: false,
            bollinger: false
        };
    }

    async loadStockData(symbol) {
        try {
            const response = await fetch(`${symbol.toLowerCase()}_data.json`);
            if (!response.ok) {
                throw new Error(`Data file not found for ${symbol}`);
            }
            
            this.currentData = await response.json();
            this.renderChart();
            this.updateStats();
            
        } catch (error) {
            alert(`Error loading data: ${error.message}`);
            console.error('Error:', error);
        }
    }

    renderChart() {
        const ctx = document.getElementById('stockChart').getContext('2d');
        
        if (this.chart) {
            this.chart.destroy();
        }

        const dates = this.currentData.map(d => d.date);
        const closes = this.currentData.map(d => d.close);
        const volumes = this.currentData.map(d => d.volume);

        const datasets = [
            {
                label: 'Close Price',
                data: closes,
                borderColor: 'rgb(75, 192, 192)',
                backgroundColor: 'rgba(75, 192, 192, 0.1)',
                borderWidth: 2,
                fill: true,
                yAxisID: 'y'
            }
        ];

        // Add technical indicators based on toggle state
        if (this.indicators.sma20) {
            datasets.push({
                label: 'SMA 20',
                data: this.currentData.map(d => d.sma_20),
                borderColor: 'rgb(255, 99, 132)',
                borderWidth: 1,
                borderDash: [5, 5],
                yAxisID: 'y'
            });
        }

        if (this.indicators.sma50) {
            datasets.push({
                label: 'SMA 50',
                data: this.currentData.map(d => d.sma_50),
                borderColor: 'rgb(153, 102, 255)',
                borderWidth: 1,
                borderDash: [5, 5],
                yAxisID: 'y'
            });
        }

        if (this.indicators.bollinger) {
            datasets.push(
                {
                    label: 'BB Upper',
                    data: this.currentData.map(d => d.bb_upper),
                    borderColor: 'rgb(255, 159, 64)',
                    borderWidth: 1,
                    yAxisID: 'y'
                },
                {
                    label: 'BB Lower',
                    data: this.currentData.map(d => d.bb_lower),
                    borderColor: 'rgb(255, 159, 64)',
                    borderWidth: 1,
                    yAxisID: 'y'
                }
            );
        }

        this.chart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: dates,
                datasets: datasets
            },
            options: {
                responsive: true,
                interaction: {
                    mode: 'index',
                    intersect: false,
                },
                scales: {
                    x: {
                        type: 'time',
                        time: {
                            unit: 'day'
                        }
                    },
                    y: {
                        type: 'linear',
                        display: true,
                        position: 'left',
                    }
                },
                plugins: {
                    title: {
                        display: true,
                        text: 'Stock Price Chart'
                    },
                    tooltip: {
                        callbacks: {
                            label: function(context) {
                                return `${context.dataset.label}: $${context.parsed.y.toFixed(2)}`;
                            }
                        }
                    }
                }
            }
        });

        // Render RSI chart if enabled
        if (this.indicators.rsi) {
            this.renderRSIChart();
        }

        // Render MACD chart if enabled
        if (this.indicators.macd) {
            this.renderMACDChart();
        }
    }

    renderRSIChart() {
        const ctx = document.getElementById('rsiChart').getContext('2d');
        const dates = this.currentData.map(d => d.date);
        const rsi = this.currentData.map(d => d.rsi);

        new Chart(ctx, {
            type: 'line',
            data: {
                labels: dates,
                datasets: [{
                    label: 'RSI',
                    data: rsi,
                    borderColor: 'rgb(54, 162, 235)',
                    borderWidth: 2,
                    fill: false
                }]
            },
            options: {
                responsive: true,
                scales: {
                    y: {
                        min: 0,
                        max: 100,
                        ticks: {
                            callback: function(value) {
                                return value + '%';
                            }
                        }
                    }
                },
                plugins: {
                    title: {
                        display: true,
                        text: 'Relative Strength Index (RSI)'
                    },
                    annotation: {
                        annotations: {
                            overbought: {
                                type: 'line',
                                yMin: 70,
                                yMax: 70,
                                borderColor: 'red',
                                borderWidth: 1,
                                label: {
                                    content: 'Overbought',
                                    enabled: true
                                }
                            },
                            oversold: {
                                type: 'line',
                                yMin: 30,
                                yMax: 30,
                                borderColor: 'green',
                                borderWidth: 1,
                                label: {
                                    content: 'Oversold',
                                    enabled: true
                                }
                            }
                        }
                    }
                }
            }
        });
    }

    renderMACDChart() {
        const ctx = document.getElementById('macdChart').getContext('2d');
        const dates = this.currentData.map(d => d.date);
        const macd = this.currentData.map(d => d.macd);
        const signal = this.currentData.map(d => d.macd_signal);

        new Chart(ctx, {
            type: 'line',
            data: {
                labels: dates,
                datasets: [
                    {
                        label: 'MACD',
                        data: macd,
                        borderColor: 'blue',
                        borderWidth: 2
                    },
                    {
                        label: 'Signal',
                        data: signal,
                        borderColor: 'red',
                        borderWidth: 2
                    }
                ]
            },
            options: {
                responsive: true,
                plugins: {
                    title: {
                        display: true,
                        text: 'MACD'
                    }
                }
            }
        });
    }

    updateStats() {
        if (!this.currentData) return;

        const latest = this.currentData[this.currentData.length - 1];
        const first = this.currentData[0];
        const change = ((latest.close - first.close) / first.close * 100).toFixed(2);

        document.getElementById('currentPrice').textContent = `$${latest.close.toFixed(2)}`;
        document.getElementById('priceChange').textContent = `${change}%`;
        document.getElementById('priceChange').className = `change ${change >= 0 ? 'positive' : 'negative'}`;
        document.getElementById('volume').textContent = latest.volume.toLocaleString();
        document.getElementById('rsiValue').textContent = latest.rsi ? latest.rsi.toFixed(2) : 'N/A';
    }

    toggleIndicator(indicator) {
        this.indicators[indicator] = !this.indicators[indicator];
        this.renderChart();
    }
}

// Initialize visualizer when page loads
document.addEventListener('DOMContentLoaded', function() {
    const visualizer = new StockVisualizer();
    window.stockVisualizer = visualizer;

    // Load default symbol
    visualizer.loadStockData('AAPL');

    // Setup event listeners
    document.getElementById('loadBtn').addEventListener('click', function() {
        const symbol = document.getElementById('symbolInput').value.toUpperCase();
        if (symbol) {
            visualizer.loadStockData(symbol);
        }
    });

    // Toggle buttons
    document.querySelectorAll('.toggle-btn').forEach(btn => {
        btn.addEventListener('click', function() {
            const indicator = this.dataset.indicator;
            visualizer.toggleIndicator(indicator);
            this.classList.toggle('active');
        });
    });
});